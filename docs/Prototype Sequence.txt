Training A Sequence Model:

edu.berkeley.nlp.prototype.PrototypeSequenceModelTrainer



Usage:
  PrototypeSequenceModel.order					<  int> : Markov order of sequence model [2]
  PrototypeSequenceModel.numIters				<  int> : Number of iterations [100]
  PrototypeSequenceModel.minIters				<  int> : Minimum number of iterations [50]
  PrototypeSequenceModel.sigmaSquared			<  dbl> : L2 Penalty Parameter [0.5]
  PrototypeSequenceModel.maxWeight				<  dbl> : What weight is max. absolute value [25.0]
  PrototypeSequenceModel.useEdgeFeatures		< bool> : Should we use edge transition features [true]
  PrototypeSequenceModel.useAllLengthsPartition	< bool> : Use all lengths partition function instead of Length Neighborhood approx [true]
  PrototypeSequenceModel.verbose				< bool> : Only if you want to see lots of data go by [false]
  PrototypeSequenceModel.numCPUS				<  int> : How many CPUs to use. Defaults to number Available [8]
  AddPrototypeFeatureExtractor.numSimilarWords	<  int> : Number of prototype features per word [3]
  AddPrototypeFeatureExtractor.simThreshold		<  dbl> : Threshold for similarity [0.35]
  SentenceIterable.dataRoot						<  str> :  []
  SentenceIterable.prefix						<  str> : Prefix of files to consider []
  SentenceIterable.extension					<  str> : Extension of files to consider. If you pass .gz as a suffix, we will unzip them with gzip [.txt]
  SentenceIterable.maxNumSentences				<  int> : Maxixum number of sentences [2147483647]
  SentenceIterable.tokenize						< bool> : Tokenize each sentence [false]
  SentenceIterable.lowercase					< bool> : Lowercase data [false]
  SentenceIterable.bufferSize					<  int> : How many sentences to buffer [1]
  SentenceIterable.maxSentenceLength			<  int> : Maximum number of sentences [2147483647]
  SentenceIterable.sentenceSegment				< bool> : Do we need to segment senteces first. Forces tokenize=true [false]
  PrototypeSequenceModelTrainer.protoFile		<  str> : Prototype File []
  PrototypeSequenceModelTrainer.outfile			<  str> : Sequence Model Outfile []
  PrototypeSequenceModelTrainer.simModelPath	<  str> : Prototype Similarity Model []
  exec.create									< bool> : Whether to create a directory for this run; if not, don't generate output files [false]
  exec.monitor									< bool> : Whether to create a thread to monitor the status. [false]
  exec.execDir									<  str> : Directory to put all output files; if blank, use execPoolDir. []
  exec.execPoolDir								<  str> : Directory which contains all the executions (or symlinks). []
  exec.actualExecPoolDir						<  str> : Directory which actually holds the executions. []
  exec.overwriteExecDir							< bool> : Overwrite the contents of the execDir if it doesn't exist (e.g., when running a thunk). [false]
  exec.useStandardExecPoolDirStrategy			< bool> : Assume in the run directory, automatically set execPoolDir and actualExecPoolDir [false]
  exec.printOptionsAndExit						< bool> : Simply print options and exit. [false]
  exec.miscOptions								< str*> : Miscellaneous options (written to options.map and output.map, displayed in servlet); example: a=3 b=4 []
  exec.addToView								< str*> : Name of the view to add this execution to in the servlet []
  exec.recordPath								<  str> : Record file to write to []
  exec.charEncoding								<  str> : Character encoding []
  exec.jarFiles									< str*> : Name of jar files to load prior to execution []
  exec.dontInitializeJars						< bool> : Skip initialization of jars [false]
  exec.makeThunk								< bool> : Make a thunk (a delayed computation). [false]
  exec.thunkAutoQueue							< bool> : A note to the servlet to automatically run the thunk when it sees it [false]
  exec.thunkPriority							<  int> : Priority of the thunk. [0]
  exec.thunkJavaOpts							<  str> : Java options to pass to Java when later running the thunk []
  exec.dontCatchExceptions						< bool> : Whether to catch exceptions (ignored when making a thunk) [false]
  log.maxIndLevel								<  int> : Maximum indent level. [10]
  log.msPerLine									<  int> : Maximum number of milliseconds between consecutive lines of output. [1000]
  log.file										<  str> : File to write log. []
  log.stdout									< bool> : Whether to output to the console. [true]
  log.note										<  str> : Dummy placeholder for a comment []
  log.forcePrint								< bool> : Force printing from logs* [false]
  BasicWordFeatureExtractor.useSuffixFeatures	< bool> :  [false]
  BasicWordFeatureExtractor.suffixLength		<  int> :  [3]
  BasicWordFeatureExtractor.useInitialCapital	< bool> :  [false]
  BasicWordFeatureExtractor.useHasDigit			< bool> :  [false]
  BasicWordFeatureExtractor.useHasHyphen		< bool> :  [false]



Build Word Similarity Model:

edu.berkeley.nlp.prototype.simmodel.WordContextSimilarity

Usage:
  WordContextSimilarity.appendDistance		< bool> : Should we care about distance for context feature [false]
  WordContextSimilarity.directional			< bool> : Should we care about direction? [false]
  WordContextSimilarity.contextWindow		<  int> : How large is context window? [2]
  WordContextSimilarity.lowercase			< bool> : Lowercase all data [false]
  WordContextSimilarity.wordFile			<  str> : File with words to build model over, one per line []
  WordContextSimilarity.contextWordFile		<  str> : File with words to use for context []
  WordContextSimilarity.numWords			<  int> : How many times do you need to appear to include [40000]
  WordContextSimilarity.numContextWords		<  int> : How many times to occur to consider a context word [1300]
  WordContextSimilarity.reducedDimension	<  int> : If you use doSVD how many dimensions to project down to [50]
  WordContextSimilarity.outfile				<  str> : Where to write model []
  WordContextSimilarity.reduceType			< enum> : What (if any) type of reduction to use [NONE] SVD|RAND_PROJ|NONE
  SentenceIterable.dataRoot					<  str> :  []
  SentenceIterable.prefix					<  str> : Prefix of files to consider []
  SentenceIterable.extension				<  str> : Extension of files to consider. If you pass .gz as a suffix, we will unzip them with gzip [.txt]
  SentenceIterable.maxNumSentences			<  int> : Maxixum number of sentences [2147483647]
  SentenceIterable.tokenize					< bool> : Tokenize each sentence [false]
  SentenceIterable.lowercase				< bool> : Lowercase data [false]
  SentenceIterable.bufferSize				<  int> : How many sentences to buffer [1]
  SentenceIterable.maxSentenceLength		<  int> : Maximum number of sentences [2147483647]
  SentenceIterable.sentenceSegment			< bool> : Do we need to segment senteces first. Forces tokenize=true [false]
  exec.create								< bool> : Whether to create a directory for this run; if not, don't generate output files [false]
  exec.monitor								< bool> : Whether to create a thread to monitor the status. [false]
  exec.execDir								<  str> : Directory to put all output files; if blank, use execPoolDir. []
  exec.execPoolDir							<  str> : Directory which contains all the executions (or symlinks). []
  exec.actualExecPoolDir					<  str> : Directory which actually holds the executions. []
  exec.overwriteExecDir						< bool> : Overwrite the contents of the execDir if it doesn't exist (e.g., when running a thunk). [false]
  exec.useStandardExecPoolDirStrategy		< bool> : Assume in the run directory, automatically set execPoolDir and actualExecPoolDir [false]
  exec.printOptionsAndExit					< bool> : Simply print options and exit. [false]
  exec.miscOptions							< str*> : Miscellaneous options (written to options.map and output.map, displayed in servlet); example: a=3 b=4 []
  exec.addToView							< str*> : Name of the view to add this execution to in the servlet []
  exec.recordPath							<  str> : Record file to write to []
  exec.charEncoding							<  str> : Character encoding []
  exec.jarFiles								< str*> : Name of jar files to load prior to execution []
  exec.dontInitializeJars					< bool> : Skip initialization of jars [false]
  exec.makeThunk							< bool> : Make a thunk (a delayed computation). [false]
  exec.thunkAutoQueue						< bool> : A note to the servlet to automatically run the thunk when it sees it [false]
  exec.thunkPriority						<  int> : Priority of the thunk. [0]
  exec.thunkJavaOpts						<  str> : Java options to pass to Java when later running the thunk []
  exec.dontCatchExceptions					< bool> : Whether to catch exceptions (ignored when making a thunk) [false]
  log.maxIndLevel							<  int> : Maximum indent level. [10]
  log.msPerLine								<  int> : Maximum number of milliseconds between consecutive lines of output. [1000]
  log.file									<  str> : File to write log. []
  log.stdout								< bool> : Whether to output to the console. [true]
  log.note									<  str> : Dummy placeholder for a comment []
  log.forcePrint							< bool> : Force printing from logs* [false]



Testing the Sequence Model



Usage:
  PrototypeSequenceModelTester.modelPath <  str> : Path to Sequence Model []
  PrototypeSequenceModelTester.inDirRoot <  str> : Directory to read data []
  PrototypeSequenceModelTester.delimeter <  str> : Delimeter to use between words and tags [##]
  PrototypeSequenceModelTester.inExtension <  str> : Extensions of files to read [.txt]
  PrototypeSequenceModelTester.inPrefix <  str> : Prefix for data files [Defaults to none] []
  PrototypeSequenceModelTester.outDir <  str> : Directory to write tagged data []
  PrototypeSequenceModelTester.outExtension <  str> : Extension to append to output file [.tagged]
  exec.create                    < bool> : Whether to create a directory for this run; if not, don't generate output files [false]
  exec.monitor                   < bool> : Whether to create a thread to monitor the status. [false]
  exec.execDir                   <  str> : Directory to put all output files; if blank, use execPoolDir. []
  exec.execPoolDir               <  str> : Directory which contains all the executions (or symlinks). []
  exec.actualExecPoolDir         <  str> : Directory which actually holds the executions. []
  exec.overwriteExecDir          < bool> : Overwrite the contents of the execDir if it doesn't exist (e.g., when running a thunk). [false]
  exec.useStandardExecPoolDirStrategy < bool> : Assume in the run directory, automatically set execPoolDir and actualExecPoolDir [false]
  exec.printOptionsAndExit       < bool> : Simply print options and exit. [false]
  exec.miscOptions               < str*> : Miscellaneous options (written to options.map and output.map, displayed in servlet); example: a=3 b=4 []
  exec.addToView                 < str*> : Name of the view to add this execution to in the servlet []
  exec.recordPath                <  str> : Record file to write to []
  exec.charEncoding              <  str> : Character encoding []
  exec.jarFiles                  < str*> : Name of jar files to load prior to execution []
  exec.dontInitializeJars        < bool> : Skip initialization of jars [false]
  exec.makeThunk                 < bool> : Make a thunk (a delayed computation). [false]
  exec.thunkAutoQueue            < bool> : A note to the servlet to automatically run the thunk when it sees it [false]
  exec.thunkPriority             <  int> : Priority of the thunk. [0]
  exec.thunkJavaOpts             <  str> : Java options to pass to Java when later running the thunk []
  exec.dontCatchExceptions       < bool> : Whether to catch exceptions (ignored when making a thunk) [false]
  log.maxIndLevel                <  int> : Maximum indent level. [10]
  log.msPerLine                  <  int> : Maximum number of milliseconds between consecutive lines of output. [1000]
  log.file                       <  str> : File to write log. []
  log.stdout                     < bool> : Whether to output to the console. [true]
  log.note                       <  str> : Dummy placeholder for a comment []
  log.forcePrint                 < bool> : Force printing from logs* [false]