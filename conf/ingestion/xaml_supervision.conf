# This conf file is intended for use with the 'parse_xaml' script
#
# to extract classification information from annotated XAML documents.
#

# Where the annotated XAML files are saved.
input_dir = "/Users/rgeorgi/Documents/treebanks/xigt_odin/annotated"

# The pattern for selected which XAML files to use
pattern = "*-filtered.xml"

# Whether to lowercase the outputted grams or not
lowercase = True
	
# Limit of instances per DocID to Pull
docid_limit = 3
	
# Where the POS dictionary pickle is located.
posdict = "/Users/rgeorgi/Dropbox/code/eclipse/dissertation/data/models/posdict.pickle"

# Now the settings for the feature extraction
outdir = "/Users/rgeorgi/Dropbox/code/eclipse/dissertation/data/glosses"

# Output for xigt
xigtout = "/Users/rgeorgi/Dropbox/code/eclipse/dissertation/data/xigt"

# Path for the POS tagging model
tagger_model = "/Users/rgeorgi/Dropbox/code/eclipse/dissertation/data/models/wsj_remapped.tagger"

# ==========================================
# Feature Extraction Settings
# ==========================================

# Just the basic morph features
feat_basic = True

# Use the POS tag that the 
feat_align = False

# Which alignment to use for feat_align; the heuristic one, or the gold
# [ gold | heur ]
feat_align_type = gold

# Which POS tags to use for the aligned features
# [ gold | tags ]
feat_align_tags = tags

# Use a feature of whether or not the gram contains a numeral
feat_has_number = False

# Affix features...
feat_suffix = True
feat_prefix = True

# Use a feature that is the number of morphs in the word
feat_morph_num = False

# Contextual features
feat_prev_gram = True
feat_next_gram = True

# Contextual Dict Features
feat_prev_gram_dict = True
feat_next_gram_dict = True

# Use the "posdict" above to predict the word type based on its most frequent tag in the PTB
feat_dict = True

# Path to the classifier to see how it is performing...
classifier_path = "/Users/rgeorgi/Dropbox/code/eclipse/dissertation/data/tagging/glosses/gloss.maxent"