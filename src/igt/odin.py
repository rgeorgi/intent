#!/usr/bin/env python
# encoding: utf-8
'''
igt.odin -- parser for 2013 ODIN data

igt.odin is a parser

It defines an input reader that outputs IGT instances

@author:     rgeorgi@uw.edu
			
@copyright:  2013 Ryan Georgi. All rights reserved.
			
@license:    MIT License

@contact:    rgeorgi@uw.edu
@deffield    updated: Updated
'''

import sys
import os
import re

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2013-08-26'
__updated__ = '2013-08-26'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def read_file(path):
	f = file(path, 'r')
	data = f.read()
	instances = re.findall('doc_id[\s\S]+?\n\n', data, flags=re.I)
	for instance in instances:
		lang_id = re.search('lang_code.*?\((...)\)', instance).group(1)
		print lang_id

def read_dir(in_dir):
	for root, dirs, files in os.walk(in_dir):
		for f in filter(lambda f: f.endswith('.check'), files):
			igts = read_file(os.path.join(root, f))

def main(argv=None):
	'''Command line options.'''
	
	program_name = os.path.basename(sys.argv[0])
	program_version = "v0.1"
	program_build_date = "%s" % __updated__
	
	program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''''' # optional - give further explanation about what the program does
	program_license = "Copyright 2013 rgeorgi@uw.edu (Ryan Georgi)                                            \
				Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"
	
	if argv is None:
		argv = sys.argv[1:]
	try:
		# setup option parser
		parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
		parser.add_option("-i", "--in", dest="indir", help="set input path [default: %default]", metavar="FILE")
		parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
		parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")
		
		
		
		# set defaults
		parser.set_defaults(outfile="./out.txt", indir="./")
		
		# process options
		(opts, args) = parser.parse_args(argv)
		
		if opts.verbose > 0:
			print("verbosity level = %d" % opts.verbose)
		if opts.indir:
			opts.indir = os.path.expanduser(opts.indir)
			opts.indir = os.path.expandvars(opts.indir)
			print("infile = %s" % opts.indir)
		if opts.outfile:
			print("outfile = %s" % opts.outfile)
			
		# MAIN BODY #
		if not os.path.exists(opts.indir):
			raise Exception('test')
		
		read_dir(opts.indir)
		
	except Exception, e:
		indent = len(program_name) * " "
		sys.stderr.write(program_name + ": " + repr(e) + "\n")
		sys.stderr.write(indent + "  for help use --help\n")
		return 2


if __name__ == "__main__":
	if DEBUG:
		sys.argv.append("-h")
	if TESTRUN:
		import doctest
		doctest.testmod()
	if PROFILE:
		import cProfile
		import pstats
		profile_filename = 'igt.odin_profile.txt'
		cProfile.run('main()', profile_filename)
		statsfile = open("profile_stats.txt", "wb")
		p = pstats.Stats(profile_filename, stream=statsfile)
		stats = p.strip_dirs().sort_stats('cumulative')
		stats.print_stats()
		statsfile.close()
		sys.exit(0)
	sys.exit(main())