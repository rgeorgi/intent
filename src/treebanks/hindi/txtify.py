'''
Created on Oct 14, 2013

@author: rgeorgi
'''

import os, sys, re
from optparse import OptionParser
from utils.commandline import require_opt
import ConfigParser
from trees.ptb import parse_ptb_string
from treebanks.common import process_tree, write_files
from pos.TagMap import TagMap
import codecs


def parse_hindi(root, outdir, testfile, trainfile, goldfile, split = 90, maxlength = 10,
			delimeter='##', tagmap = None, remappedfile = None,
			start_section = 0, sentence_limit = 0):
	
	tm = None
	if tagmap:
		tm = TagMap(path=tagmap)
	
	# Open up the hindi treebank (in PTB format)
	hindi_f = codecs.open(root, 'r', encoding='latin-1', errors='strict')
	hindi_lines = hindi_f.read()
	hindi_f.close()
	
	# Now, find all the sents.
	hindi_sents = re.findall('<Sentence[\s\S]+?</Sentence>', hindi_lines)
	
	all_sents = []
	gold_sents = []
	
	sent_count = 0
	for hindi_sent in hindi_sents:
		
		sent_id = re.search('id="(.*?)"', hindi_sent).group(1)
		sent_lines = re.search('<Sentence.*?\n([\s\S]+?)</Sentence', hindi_sent)
		sent_lines = sent_lines.group(1).split('\n')
		
		if not len(sent_lines):
			continue
		gold_str = ''
		sent_str = ''
		for line in sent_lines:
			tokens = line.split('\t')
			if not len(tokens) > 1:
				continue
			tag = tokens[2]
			if tm:
				try:
					tag = tm[tokens[2]]
				except KeyError as ke:
					sys.stderr.write('Tag %s for sent %s not found.' % (tag, sent_id))
					raise ke
			gold_str += '%s%s%s ' % (tokens[1], delimeter, tag)
			sent_str += '%s ' % (tokens[1])
		
		if sent_str.strip():
			all_sents.append(sent_str.strip())
			gold_sents.append(gold_str.strip())
			
		
		sent_count+=1			
		if sentence_limit and sent_count == sentence_limit:
			break

	write_files(outdir, split, testfile, trainfile, goldfile, all_sents, gold_sents)


if __name__ == '__main__':
	'''Command line options.'''
	
	program_name = os.path.basename(sys.argv[0])
	program_version = "v0.1"

	
	program_version_string = '%%prog %s' % (program_version)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''''' # optional - give further explanation about what the program does
	program_license = "Copyright 2013 Ryan Georgi (Ryan Georgi)                                            \
				Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"


	# setup option parser
	parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
	parser.add_option("-c", "--conf", dest="conf", help="set conf file [default: %default]", metavar="FILE")
		
	# set defaults
	parser.set_defaults()
	
	# process options
	(opts, args) = parser.parse_args(sys.argv)
	
	errors = require_opt(opts.conf, "Please specify the configuration file with -c or --conf", True)
		
	if errors:
		raise Exception("There were errors found in processing.")
	
	# MAIN BODY #
	c = ConfigParser.ConfigParser(defaults={'tagmap':None, 'remappedfile':None, 'start_section':'2','sentence_limit':'2000'})
	c.read(opts.conf)
	parse_hindi(c.get('hindi', 'root'), c.get('hindi', 'outdir'), c.get('hindi', 'testfile'), 
			c.get('hindi', 'trainfile'), c.get('hindi', 'goldfile'), c.getint('hindi', 'trainsplit'), 
			c.getint('hindi', 'maxlength'), c.get('hindi', 'delimeter'),
			c.get('hindi', 'tagmap'), c.get('hindi', 'remappedfile'),
			c.getint('hindi', 'start_section'),
			c.getint('hindi', 'sentence_limit'))