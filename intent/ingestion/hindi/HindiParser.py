'''
Created on Oct 14, 2013

@author: rgeorgi
'''

import os, sys, re
from argparse import ArgumentParser

from ingestion.common import process_tree, write_files
from pos.TagMap import TagMap
import codecs
from ingestion.TextParser import TextParser
from utils.ConfigFile import ConfigFile


class HindiParser(TextParser):
	
	def __init__(self, conf):
		self.conf = conf
		
	def parse(self):
		c = ConfigFile(self.conf)
		
		# Set the defaults...
		c.set_defaults({'trainsplit':90, 'maxlength':10, 'delimeter':'/'})
		
		root = c['root']
		outdir = c['outdir']
		testfile = c['testfile']
		trainfile = c['trainfile']
		goldfile = c['goldfile']
		split = c['trainsplit']
		maxlength = c['maxLength']
		delimeter = c['delimeter']
		tagmap = c['tagmap']
	
		tm = None
		if tagmap:
			tm = TagMap(path=tagmap)
		
		# Open up the hindi treebank (in PTB format)
		hindi_f = codecs.open(root, 'r', encoding='latin-1', errors='strict')
		hindi_lines = hindi_f.read()
		hindi_f.close()
		
		# Now, find all the sents.
		hindi_sents = re.findall('<Sentence[\s\S]+?</Sentence>', hindi_lines)
		
		all_sents = []
		gold_sents = []
		
		sent_count = 0
		for hindi_sent in hindi_sents:
			
			sent_id = re.search('id="(.*?)"', hindi_sent).group(1)
			sent_lines = re.search('<Sentence.*?\n([\s\S]+?)</Sentence', hindi_sent)
			sent_lines = sent_lines.group(1).split('\n')
			
			if not len(sent_lines):
				continue
			gold_str = ''
			sent_str = ''
			for line in sent_lines:
				tokens = line.split('\t')
				if not len(tokens) > 1:
					continue
				tag = tokens[2]
				if tm:
					try:
						tag = tm[tokens[2]]
					except KeyError as ke:
						sys.stderr.write('Tag %s for sent %s not found.' % (tag, sent_id))
						raise ke
				gold_str += '%s%s%s ' % (tokens[1], delimeter, tag)
				sent_str += '%s ' % (tokens[1])
			
			if sent_str.strip():
				all_sents.append(sent_str.strip())
				gold_sents.append(gold_str.strip())
				
			
			sent_count+=1			
	
		write_files(outdir, split, testfile, trainfile, goldfile, all_sents, gold_sents)


if __name__ == '__main__':
	'''Command line options.'''
	
	program_name = os.path.basename(sys.argv[0])
	program_version = "v0.1"

	
	program_version_string = '%%prog %s' % (program_version)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''''' # optional - give further explanation about what the program does
	program_license = "Copyright 2013 Ryan Georgi (Ryan Georgi)                                            \
				Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"


	# setup option parser
	parser = ArgumentParser(version=program_version_string, epilog=program_longdesc, description=program_license)
	parser.add_argument("-c", "--conf", dest="conf", help="set conf file [default: %default]", metavar="FILE", required=True)
		
	# set defaults
	parser.set_defaults()
	
	# process options
	opts = parser.parse_args(sys.argv)
	
	# MAIN BODY #
	p = HindiParser(opts.conf)
	p.parse()
